---
title: "Customized Merge Sort Implementation in R: Sorting 10,000 Random Values"
author: "Nikhil Rachagani"
date: "2023-12-14"
categories: [code, analysis]
image: "image.jpg"
---

***In this R script, we present a customized implementation of the Merge Sort algorithm to efficiently sort an array of 10,000 randomly generated values. The modified custom_merge_sort function employs a recursive approach to divide the array into subarrays until reaching individual elements, followed by merging the sorted subarrays. The script utilizes the sample function to generate a set of 10,000 random values ranging from 1 to 10,000,000 and measures the time taken to perform the sorting operation. This exploration not only showcases the implementation of the custom Merge Sort but also provides insights into the efficiency of the algorithm in handling a substantial dataset..***

```{r}
# Modified Merge Sort function
custom_merge_sort <- function(input_array) {
  if (length(input_array) <= 1) {
    return(input_array)
  }
  
  middle_index <- length(input_array) %/% 2
  left_array <- custom_merge_sort(input_array[1:middle_index])
  right_array <- custom_merge_sort(input_array[(middle_index + 1):length(input_array)])
  
  return(merge(left_array, right_array))
}

# Generate 100 random values
set_seed <- 1024  # Set seed for reproducibility
set.seed(set_seed)
random_values <- sample(1:10000000, 10000, replace = TRUE)

# Measure time taken to sort
start_time <- Sys.time()
sorted_values <- custom_merge_sort(random_values)
end_time <- Sys.time()

# Display original and sorted values and time taken
cat("Original Values: ", random_values, "\n")
cat("Sorted Values: ", unlist(sorted_values), "\n")
cat("Time Taken to Sort: ", end_time - start_time, " seconds\n")

```
